name: DevSecOps Security Pipeline - Only Scans

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  security-scan:
    runs-on: self-hosted

    steps:

      # ======================
      # 1️⃣ CHECKOUT REPOSITORY
      # ======================
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ======================
      # 2️⃣ SETUP PYTHON ENVIRONMENT
      # ======================
      - name: Install Python Dependencies
        run: |
          py -m pip install --upgrade pip==22.0.4
          py -m pip install -r requirements.txt

      - name: Create Uploads Directory
        run: |
          if (!(Test-Path "static\uploads")) { New-Item -ItemType Directory -Path "static\uploads" }

      - name: Ensure .env File Exists
        run: |
          if (!(Test-Path ".env")) {
            Set-Content -Path ".env" -Value "DB_HOST=localhost`nDB_PORT=5432`nDB_USER=postgres`nDB_PASSWORD=postgres`nDB_NAME=vulnbank`nSECRET_KEY=supersecret"
          }

      - name: Update .env File for Localhost
        run: |
          (Get-Content .env) -replace 'DB_HOST=db','DB_HOST=localhost' | Set-Content .env

      # ======================
      # 3️⃣ INSTALL SECURITY TOOLS
      # ======================
      - name: Install Gitleaks
        run: |
          Invoke-WebRequest -Uri https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_windows_x64.zip -OutFile gitleaks.zip
          Expand-Archive -Path gitleaks.zip -DestinationPath .\gitleaks -Force
          $env:PATH += ";$PWD\gitleaks"

      - name: Install pip-audit
        run: py -m pip install --upgrade pip-audit

      - name: Install Bandit
        run: py -m pip install bandit

      - name: Install Trivy
        run: |
          Invoke-WebRequest -Uri https://github.com/aquasecurity/trivy/releases/download/v0.42.1/trivy_0.42.1_Windows-64bit.zip -OutFile trivy.zip
          Expand-Archive -Path trivy.zip -DestinationPath .\trivy -Force

      # ======================
      # 4️⃣ SECURITY SCANNING (lanjut walau ada finding)
      # ======================
      - name: Run Gitleaks
        continue-on-error: true
        run: .\gitleaks\gitleaks.exe detect --source=. --report-path=gitleaks-report.json

      - name: Run pip-audit
        continue-on-error: true
        run: py -m pip_audit -r requirements.txt -f json -o sca-report.json

      - name: Run Bandit
        continue-on-error: true
        run: py -m bandit -r . -f json -o bandit-report.json

      - name: Run Trivy (scan Dockerfile)
        continue-on-error: true
        run: .\trivy\trivy.exe config . --format json --output trivy-dockerfile-report.json

      - name: Add Git Bash to PATH for ZAP action
        run: |
          # Menambahkan lokasi tools (seperti 'touch') dari Git ke PATH
          # Lokasi bisa berbeda tergantung instalasi Git Anda
          echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Start Application in Background
        run: |
          # 'Start-Process' untuk menjalankan di background pada PowerShell
          Start-Process python -ArgumentList "app.py"
          # Beri waktu beberapa detik agar server aplikasi siap
          Start-Sleep -Seconds 15

      - name: Run OWASP ZAP Baseline Scan
        continue-on-error: true
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: "http://localhost:5000"

      # ======================
      # 5️⃣ UPLOAD REPORTS
      # ======================
      - name: Ensure Reports Exist
        run: |
          if (!(Test-Path "gitleaks-report.json")) { '{}' | Out-File gitleaks-report.json }
          if (!(Test-Path "sca-report.json")) { '{}' | Out-File sca-report.json }
          if (!(Test-Path "bandit-report.json")) { '{}' | Out-File bandit-report.json }
          if (!(Test-Path "trivy-dockerfile-report.json")) { '{}' | Out-File trivy-dockerfile-report.json }
          if (!(Test-Path "app.log")) { '' | Out-File app.log }

      - name: Upload Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            gitleaks-report.json
            sca-report.json
            bandit-report.json
            trivy-dockerfile-report.json
            app.log
            report.html
            report.md

      # ======================
      # 6️⃣ NOTIFIKASI OTOMATIS
      # ======================
      - name: Check for Critical Findings and Notify Slack
        id: slack-notify
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Fungsi untuk mengirim notifikasi ke Slack
          send_slack_notification() {
              local message=$1
              local webhook_url=$2
              if [ -n "$webhook_url" ]; then
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" $webhook_url
              else
                  echo "SLACK_WEBHOOK_URL is not set. Skipping Slack notification."
              fi
          }

          # Inisialisasi pesan
          CRITICAL_FOUND="false"
          NOTIFICATION_MESSAGE="⚠️ *Peringatan Keamanan!* Kerentanan _critical_ ditemukan pada repositori vulnbank.\n"

          # ========================
          # Analisis Laporan Keamanan
          # ========================

          # 1. Analisis Bandit (SAST)
          if cat bandit-report.json | grep -q "CRITICAL"; then
              CRITICAL_FOUND="true"
              NOTIFICATION_MESSAGE+="• Kerentanan SAST (Bandit) dengan tingkat CRITICAL terdeteksi.\n"
          fi

          # 2. Analisis Trivy (Misconfiguration)
          if cat trivy-dockerfile-report.json | grep -q "\"Severity\":\"CRITICAL\""; then
              CRITICAL_FOUND="true"
              NOTIFICATION_MESSAGE+="• Misconfiguration CRITICAL (Trivy) terdeteksi di Dockerfile.\n"
          fi

          # 3. Analisis pip-audit (SCA) - periksa tingkat keparahan tinggi
          if cat sca-report.json | grep -q "\"severity\": \"high\""; then
              CRITICAL_FOUND="true"
              NOTIFICATION_MESSAGE+="• Kerentanan SCA (pip-audit) dengan tingkat HIGH terdeteksi.\n"
          fi

          # ========================
          # Kirim Notifikasi jika Perlu
          # ========================
          if [ "$CRITICAL_FOUND" = "true" ]; then
              echo "Kerentanan critical ditemukan. Mengirim notifikasi ke Slack..."
              send_slack_notification "$NOTIFICATION_MESSAGE" "$SLACK_WEBHOOK_URL"
          else
              echo "Tidak ada kerentanan critical yang ditemukan. Tidak ada notifikasi yang dikirim."
          fi
