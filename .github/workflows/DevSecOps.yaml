name: DevSecOps Security Pipeline with Stages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # ======================
  # STAGE 1: SETUP ENVIRONMENT
  # ======================
  setup:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python Dependencies
        run: |
          py -m pip install --upgrade pip==22.0.4
          py -m pip install -r requirements.txt

      - name: Create Uploads Directory
        run: |
          if (!(Test-Path "static\uploads")) { New-Item -ItemType Directory -Path "static\uploads" }

      - name: Ensure .env File Exists
        run: |
          if (!(Test-Path ".env")) {
            Set-Content -Path ".env" -Value "DB_HOST=localhost`nDB_PORT=5432`nDB_USER=postgres`nDB_PASSWORD=postgres`nDB_NAME=vulnbank`nSECRET_KEY=supersecret"
          }

      - name: Update .env File for Localhost
        run: |
          (Get-Content .env) -replace 'DB_HOST=db','DB_HOST=localhost' | Set-Content .env

  # ======================
  # STAGE 2: RUN FLASK APP & NGROK
  # ======================
  # run-app:
  #   runs-on: self-hosted
  #   needs: setup
  #   steps:
  #     - name: Install Ngrok
  #       run: |
  #         Invoke-WebRequest -Uri https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
  #         Expand-Archive -Path ngrok.zip -DestinationPath .\ngrok -Force
  #         $env:PATH += ";$PWD\ngrok"

  #     - name: Start Flask App and Ngrok
  #       id: flask-ngrok
  #       run: |
  #         # Start Flask app
  #         Start-Process -FilePath "py" -ArgumentList "app.py" -NoNewWindow
  #         Start-Sleep -Seconds 15

  #         # Start Ngrok to expose port 5000
  #         Start-Process -FilePath "ngrok.exe" -ArgumentList "http 5000" -NoNewWindow
  #         Start-Sleep -Seconds 5

  #         # Get Ngrok public URL
  #         $ngrok_url = (Invoke-RestMethod http://127.0.0.1:4040/api/tunnels).tunnels[0].public_url
  #         echo "::set-output name=ngrok_url::$ngrok_url"

  # ======================
  # STAGE 3: INSTALL SECURITY TOOLS
  # ======================
  install-tools:
    runs-on: self-hosted
    needs: run-app
    steps:
      - name: Install Gitleaks
        run: |
          Invoke-WebRequest -Uri https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_windows_x64.zip -OutFile gitleaks.zip
          Expand-Archive -Path gitleaks.zip -DestinationPath .\gitleaks -Force
          $env:PATH += ";$PWD\gitleaks"

      - name: Install pip-audit
        run: |
          py -m pip install --upgrade pip-audit

      - name: Install Bandit
        run: |
          py -m pip install bandit

  # ======================
  # STAGE 4: SECURITY SCANNING
  # ======================
  security-scan:
    runs-on: self-hosted
    needs: install-tools
    steps:
      - name: Run Gitleaks
        run: |
          try { gitleaks detect --source=. --report-path=gitleaks-report.json } catch { Write-Host "Gitleaks scan failed" }

      - name: Run pip-audit
        run: |
          try { py -m pip_audit -r requirements.txt -f json -o sca-report.json } catch { Write-Host "pip-audit failed" }

      - name: Run Bandit
        run: |
          try { bandit -r . -f json -o bandit-report.json } catch { Write-Host "Bandit failed" }

      - name: Run Dockle
        run: |
          try { docker run --rm -v "${PWD}:/app" goodwithtech/dockle:latest /app/Dockerfile } catch { Write-Host "Dockle failed" }

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: "http://localhost:5000"
        continue-on-error: true

  # ======================
  # STAGE 5: UPLOAD REPORTS
  # ======================
  upload-reports:
    runs-on: self-hosted
    needs: security-scan
    steps:
      - name: Ensure Reports Exist
        run: |
          if (!(Test-Path "gitleaks-report.json")) { '{}' | Out-File gitleaks-report.json }
          if (!(Test-Path "sca-report.json")) { '{}' | Out-File sca-report.json }
          if (!(Test-Path "bandit-report.json")) { '{}' | Out-File bandit-report.json }
          if (!(Test-Path "app.log")) { '' | Out-File app.log }

      - name: Upload Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            gitleaks-report.json
            sca-report.json
            bandit-report.json
            app.log

      - name: Show Ngrok Public URL
        run: |
          Write-Host "Ngrok URL: ${{ needs.run-app.outputs.ngrok_url }}"
