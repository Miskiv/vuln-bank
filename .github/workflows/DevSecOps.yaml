name: DevSecOps Security Pipeline - Multiple Jobs

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ======================
  # 1️⃣ SETUP ENVIRONMENT
  # ======================
  setup-environment:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Python Dependencies
        run: |
          py -m pip install --upgrade pip==22.0.4
          py -m pip install -r requirements.txt

      - name: Create and Update .env
        run: |
          if (!(Test-Path ".env")) {
            Set-Content -Path ".env" -Value "DB_HOST=localhost`nDB_PORT=5432`nDB_USER=postgres`nDB_PASSWORD=postgres`nDB_NAME=vulnbank`nSECRET_KEY=supersecret"
          }
          (Get-Content .env) -replace 'DB_HOST=db','DB_HOST=localhost' | Set-Content .env
          
      - name: Upload Environment Artifact
        uses: actions/upload-artifact@v4
        with:
          name: environment
          path: .
          retention-days: 1

  # ======================
  # 2️⃣ INSTALL SECURITY TOOLS
  # ======================
  install-security-tools:
    needs: setup-environment
    runs-on: self-hosted
    steps:
      - name: Download Environment Artifact
        uses: actions/download-artifact@v4
        with:
          name: environment
          path: .

      - name: Install Gitleaks
        run: |
          Invoke-WebRequest -Uri https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_windows_x64.zip -OutFile gitleaks.zip
          Expand-Archive -Path gitleaks.zip -DestinationPath .\gitleaks -Force
          $env:PATH += ";$PWD\gitleaks"

      - name: Install pip-audit and Bandit
        run: py -m pip install --upgrade pip-audit bandit

      - name: Install Trivy
        run: |
          Invoke-WebRequest -Uri https://github.com/aquasecurity/trivy/releases/download/v0.42.1/trivy_0.42.1_Windows-64bit.zip -OutFile trivy.zip
          Expand-Archive -Path trivy.zip -DestinationPath .\trivy -Force

      - name: Upload Tools Artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-tools
          path: |
            .\gitleaks\
            .\trivy\

  # ======================
  # 3️⃣ RUN STATIC SCANS
  # ======================
  run-static-scans:
    needs: install-security-tools
    runs-on: self-hosted
    steps:
      - name: Download Environment Artifact
        uses: actions/download-artifact@v4
        with:
          name: environment
          path: .

      - name: Download Tools Artifact
        uses: actions/download-artifact@v4
        with:
          name: security-tools
          path: .

      - name: Run Gitleaks
        run: .\gitleaks\gitleaks.exe detect --source=. --report-path=gitleaks-report.json || true

      - name: Run pip-audit
        run: py -m pip_audit -r requirements.txt -f json -o sca-report.json || true

      - name: Run Bandit
        run: py -m bandit -r . -f json -o bandit-report.json || true
        
      - name: Run Trivy (Misconfiguration)
        run: .\trivy\trivy.exe config . --format json --output trivy-dockerfile-report.json || true

      # Langkah baru: Memastikan file laporan ada sebelum diunggah
      - name: Ensure Reports Exist
        run: |
          if (!(Test-Path "gitleaks-report.json")) { '{}' | Out-File gitleaks-report.json }
          if (!(Test-Path "sca-report.json")) { '{}' | Out-File sca-report.json }
          if (!(Test-Path "bandit-report.json")) { '{}' | Out-File bandit-report.json }
          if (!(Test-Path "trivy-dockerfile-report.json")) { '{}' | Out-File trivy-dockerfile-report.json }

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            gitleaks-report.json
            sca-report.json
            bandit-report.json
            trivy-dockerfile-report.json

  # ======================
  # 4️⃣ RUN DAST SCAN
  # ======================
  dast-scan:
    needs: setup-environment
    runs-on: self-hosted
    steps:
      - name: Download Environment Artifact
        uses: actions/download-artifact@v4
        with:
          name: environment
          path: .
          
      - name: Start Application in Background
        run: |
          Start-Process python -ArgumentList "app.py"
          Start-Sleep -Seconds 15

      - name: Run OWASP ZAP Baseline Scan
        continue-on-error: true
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: "http://localhost:5000"

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: |
            report.html
            report.md

  # ======================
  # 5️⃣ NOTIFY ON CRITICAL FINDINGS
  # ======================
  notify-on-critical-findings:
    needs: [run-static-scans, dast-scan]
    if: success() || failure()
    runs-on: self-hosted
    steps:
      - name: Download Security Reports
        uses: actions/download-artifact@v4
        with:
          name: security-reports
          path: .
          
      - name: Download DAST Report
        uses: actions/download-artifact@v4
        with:
          name: dast-report
          path: .

      - name: Check for Critical Findings and Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          send_slack_notification() {
              local message=$1
              local webhook_url=$2
              if [ -n "$webhook_url" ]; then
                  curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" $webhook_url
              else
                  echo "SLACK_WEBHOOK_URL is not set. Skipping Slack notification."
              fi
          }
          
          CRITICAL_FOUND="false"
          NOTIFICATION_MESSAGE="⚠️ *Peringatan Keamanan!* Kerentanan _critical_ ditemukan pada repositori vulnbank.\n"
          
          if cat bandit-report.json | grep -q "CRITICAL"; then
              CRITICAL_FOUND="true"
              NOTIFICATION_MESSAGE+="• Kerentanan SAST (Bandit) dengan tingkat CRITICAL terdeteksi.\n"
          fi
          
          if cat trivy-dockerfile-report.json | grep -q "\"Severity\":\"CRITICAL\""; then
              CRITICAL_FOUND="true"
              NOTIFICATION_MESSAGE+="• Misconfiguration CRITICAL (Trivy) terdeteksi di Dockerfile.\n"
          fi
          
          if cat sca-report.json | grep -q "\"severity\": \"high\""; then
              CRITICAL_FOUND="true"
              NOTIFICATION_MESSAGE+="• Kerentanan SCA (pip-audit) dengan tingkat HIGH terdeteksi.\n"
          fi
          
          if [ "$CRITICAL_FOUND" = "true" ]; then
              echo "Kerentanan critical ditemukan. Mengirim notifikasi ke Slack..."
              send_slack_notification "$NOTIFICATION_MESSAGE" "$SLACK_WEBHOOK_URL"
          else
              echo "Tidak ada kerentanan critical yang ditemukan. Tidak ada notifikasi yang dikirim."
          fi
