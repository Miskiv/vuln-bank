name: DevSecOps Security Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  security-scan:
    runs-on: self-hosted  

    steps:
      # ======================
      # CHECKOUT REPO
      # ======================
      - name: Checkout repository
        uses: actions/checkout@v4

      # ======================
      # INSTALL DEPENDENCIES
      # ======================
      - name: Install Python dependencies
        run: |
          py -m pip install --upgrade pip==22.0.4
          py -m pip install -r requirements.txt

      - name: Create uploads directory (Windows safe)
        run: |
          if (!(Test-Path "static\uploads")) { New-Item -ItemType Directory -Path "static\uploads" }

      - name: Ensure .env file exists
        run: |
          if (!(Test-Path ".env")) {
            Set-Content -Path ".env" -Value "DB_HOST=localhost`nDB_PORT=5432`nDB_USER=postgres`nDB_PASSWORD=postgres`nDB_NAME=vulnbank`nSECRET_KEY=supersecret"
          }

      - name: Update .env file (Windows)
        run: |
          (Get-Content .env) -replace 'DB_HOST=db','DB_HOST=localhost' | Set-Content .env

      # ======================
      # RUN FLASK APP IN BACKGROUND
      # ======================
      - name: Run Flask App in Background (Windows)
        run: |
          Start-Process -FilePath "py" -ArgumentList "app.py" -NoNewWindow
          # Tunggu app siap sebelum scan
          Start-Sleep -Seconds 15

      # ======================
      # INSTALL SECURITY TOOLS
      # ======================
      - name: Install Gitleaks
        run: |
          Invoke-WebRequest -Uri https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_windows_x64.zip -OutFile gitleaks.zip
          Expand-Archive -Path gitleaks.zip -DestinationPath .\gitleaks -Force
          $env:PATH += ";$PWD\gitleaks"

      - name: Install pip-audit
        run: |
          py -m pip install --upgrade pip-audit

      - name: Install Bandit
        run: |
          py -m pip install bandit

      # ======================
      # SECURITY SCANNING
      # ======================
      # - name: Run Gitleaks
      #   run: |
      #     try {
      #         gitleaks detect --source=. --report-path=gitleaks-report.json
      #     } catch {
      #         Write-Host "Gitleaks scan failed, continuing..."
      #     }

      # - name: Run pip-audit
      #   run: |
      #     try {
      #         py -m pip_audit -r requirements.txt -f json -o sca-report.json
      #     } catch {
      #         Write-Host "pip-audit failed, continuing..."
      #     }

      # - name: Run Bandit
      #   run: |
      #     try {
      #         bandit -r . -f json -o bandit-report.json
      #     } catch {
      #         Write-Host "Bandit scan failed, continuing..."
      #     }

      # - name: Run Dockle
      #   run: |
      #     try {
      #         docker run --rm -v "${PWD}:/app" goodwithtech/dockle:latest /app/Dockerfile
      #     } catch {
      #         Write-Host "Dockle scan failed, continuing..."
      #     }

      # - name: Run OWASP ZAP Baseline Scan
      #   uses: zaproxy/action-baseline@v0.7.0
      #   with:
      #     target: "http://localhost:5000"
      #   continue-on-error: true

      # # ======================
      # # SAVE REPORTS
      # # ======================
      # - name: Ensure report files exist
      #   run: |
      #     if (!(Test-Path "gitleaks-report.json")) { '{}' | Out-File gitleaks-report.json }
      #     if (!(Test-Path "sca-report.json")) { '{}' | Out-File sca-report.json }
      #     if (!(Test-Path "bandit-report.json")) { '{}' | Out-File bandit-report.json }
      #     if (!(Test-Path "app.log")) { '' | Out-File app.log }

      # - name: Upload scan reports
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: security-reports
      #     path: |
      #       gitleaks-report.json
      #       sca-report.json
      #       bandit-report.json
      #       app.log
